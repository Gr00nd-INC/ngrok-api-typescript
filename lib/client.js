'use strict';
// Code generated by apic. DO NOT EDIT.
Object.defineProperty(exports, '__esModule', { value: true });
exports.Ngrok = void 0;
const wretch_1 = require('wretch');
const formData = require('form-data');
const url_1 = require('url');
const node_fetch_1 = require('node-fetch');
const services = require('./services');
wretch_1.default().polyfills({
  fetch: node_fetch_1.default,
  FormData: formData,
  URLSearchParams: url_1.URLSearchParams,
});
class Ngrok {
  /**
   * Creates an instance of the Ngrok HTTP API client
   * @constructor
   * @param {Object} config - config.apiToken and config.baseUrl
   */
  constructor({ baseUrl = 'https://api.ngrok.com', apiToken }) {
    this.baseUrl = baseUrl;
    if (apiToken) {
      this.token = apiToken;
    } else {
      throw new Error('Cannot create ngrok client without an API token');
    }
    this.httpClient = wretch_1
      .default()
      .url(baseUrl)
      .headers({
        'User-Agent': 'ngrok-ts-user-agent',
        'Ngrok-Version': '2',
      })
      .content('application/json')
      .auth('Bearer ' + this.token);
    this.abuseReports = new services.AbuseReports(this.httpClient);
    this.apiKeys = new services.APIKeys(this.httpClient);
    this.certificateAuthorities = new services.CertificateAuthorities(
      this.httpClient
    );
    this.credentials = new services.Credentials(this.httpClient);
    this.endpointConfigurations = new services.EndpointConfigurations(
      this.httpClient
    );
    this.eventStreams = new services.EventStreams(this.httpClient);
    this.eventDestinations = new services.EventDestinations(this.httpClient);
    this.eventSubscriptions = new services.EventSubscriptions(this.httpClient);
    this.eventSources = new services.EventSources(this.httpClient);
    this.ipPolicies = new services.IPPolicies(this.httpClient);
    this.ipPolicyRules = new services.IPPolicyRules(this.httpClient);
    this.ipRestrictions = new services.IPRestrictions(this.httpClient);
    this.ipWhitelist = new services.IPWhitelist(this.httpClient);
    this.reservedAddrs = new services.ReservedAddrs(this.httpClient);
    this.reservedDomains = new services.ReservedDomains(this.httpClient);
    this.sshCertificateAuthorities = new services.SSHCertificateAuthorities(
      this.httpClient
    );
    this.sshCredentials = new services.SSHCredentials(this.httpClient);
    this.sshHostCertificates = new services.SSHHostCertificates(
      this.httpClient
    );
    this.sshUserCertificates = new services.SSHUserCertificates(
      this.httpClient
    );
    this.tlsCertificates = new services.TLSCertificates(this.httpClient);
    this.tunnelSessions = new services.TunnelSessions(this.httpClient);
    this.tunnels = new services.Tunnels(this.httpClient);
    this.pointcfgModule = {
      endpointLoggingModule: new services.EndpointLoggingModule(
        this.httpClient
      ),
      endpointCircuitBreakerModule: new services.EndpointCircuitBreakerModule(
        this.httpClient
      ),
      endpointCompressionModule: new services.EndpointCompressionModule(
        this.httpClient
      ),
      endpointTlsTerminationModule: new services.EndpointTLSTerminationModule(
        this.httpClient
      ),
      endpointIpPolicyModule: new services.EndpointIPPolicyModule(
        this.httpClient
      ),
      endpointMutualTlsModule: new services.EndpointMutualTLSModule(
        this.httpClient
      ),
      endpointRequestHeadersModule: new services.EndpointRequestHeadersModule(
        this.httpClient
      ),
      endpointResponseHeadersModule: new services.EndpointResponseHeadersModule(
        this.httpClient
      ),
      endpointOAuthModule: new services.EndpointOAuthModule(this.httpClient),
      endpointWebhookValidationModule:
        new services.EndpointWebhookValidationModule(this.httpClient),
      endpointSamlModule: new services.EndpointSAMLModule(this.httpClient),
      endpointOidcModule: new services.EndpointOIDCModule(this.httpClient),
    };
  }
}
exports.Ngrok = Ngrok;
//# sourceMappingURL=client.js.map
